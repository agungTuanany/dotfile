"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" -----------------------------------------------------------------------------
" Agung Tuanany .init.vim (nvim) file
" -----------------------------------------------------------------------------
"
" Last Edited       : Fri Jan  8 02:25:05 PM WIB 2021

"
" -----------------------------------------------------------------------------
"  Heavily inspired by: @millermedeiros
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MANAGE PLUGINS
" Base runtime
call plug#begin('~/.vim/plugged')

" Core Plugs
Plug 'ctrlpvim/ctrlp.vim'                               " Full path Fuzzy file, buffer, mru, tag .. Finder for vim

Plug 'scrooloose/nerdtree'                              " A File system explorer
Plug 'scrooloose/nerdcommenter'                         " Comments function
Plug 'scrooloose/syntastic'                             " syntax checking plugin for Vim

Plug 'yggdroot/indentline'                              " For displaying thin vertical lines at each indentation level for code indented with spaces
Plug 'vim-scripts/IndentAnything'                       " Make it easier to write new indentation scripts and/or supplement existing ones XXX NEED RESEARCH XXX
Plug 'vim-scripts/IndexedSearch'                        " Redefines 6 search commands (/,?,n,N,*,#). At every search command, it automatically prints XXX NEED RESEARCH XXX
Plug 'vim-scripts/YankRing.vim'                         " Plugin allows the user to configure the number of yanked, deleted and changed text. XXX NEED RESEARCH XXX

Plug 'mileszs/ack.vim'                                  " Allows you to search with ack from within Vim and shows the results in a split window.
Plug 'vim-scripts/bufkill.vim'                          " Unload/delete/wipe a buffer, keep its window(s), display last accessed buffer(s)

Plug 'editorconfig/editorconfig-vim'                    " Helps maintain consistent coding styles

Plug 'sjl/gundo.vim'                                    " plugin to visualize your Vim undo tree.
Plug 'sjl/clam.vim'                                     " A lightweight Vim plugin for working with shell commands.
Plug 'sjl/clam.vim'                                     " Lightweight Vim plugin to easily run shell commands

Plug 'tpope/vim-repeat'                                 " Repeat last native command inside the map.
Plug 'tpope/vim-abolish'                                " Easily search for, substitute, and abbreviate multiple variants of word
Plug 'tpope/vim-fugitive'                               " A Git wrapper
Plug 'tpope/vim-markdown'                               " Vim Markdown runtime files
Plug 'tpope/vim-speeddating'                            " speeddating.vim: use CTRL-A/CTRL-X to increment dates, times, and more
Plug 'tpope/vim-surround'                               " easy surrounding everything
Plug 'tpope/vim-unimpaired'                             " Pairs handy brackets. XXX@NOTE: Implemented with NVIM
Plug 'tpope/vim-speeddating'                            " Use CTRL_A/CTR_X to increment dates, times, and more
Plug 'tpope/vim-commentary'                             " Comment stuff out

Plug 'junkblocker/patchreview-vim'                      " Vim/Neovim plugin for doing single, multi-patch or diff code reviews
Plug 'ervandew/supertab'                                " Vim plugin which allow to use <Tab> for all insert completion needs (:help ins-completion)

Plug 'godlygeek/tabular'                                " Line up text

Plug 'jiangmiao/auto-pairs'                             " Insert, or delete bracket, parens, quotes in pair
Plug 'easymotion/vim-easymotion'

Plug 'christoomey/vim-tmux-navigator'                   " Seamless navigation between tmux panes and vim split

Plug 'mhinz/vim-signify'                                " Show diff using Vim its sign columns

Plug 'terryma/vim-multiple-cursors'                     " Multiple selection

Plug 'int3/vim-extradite'                               " A git commit browser for Vim. Extends fugitive.vim

Plug 'junegunn/limelight.vim'                           " Hyperfocus-writing in Vim
Plug 'junegunn/goyo.vim'                                " Distraction-free writing in Vim
Plug 'sheerun/vim-polyglot'                             " A collection of language packs for vim

" Plug 'valloric/youcompleteme'                           "A code-completion engine for Vim

Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install' }
" Plug 'suan/vim-instant-markdown', {'for': 'markdown'} " Markdown live preview
" Plug 'neoclide/coc.nvim'                              " Make vim smart as VSCOde XXX NOTE: It's Repetitive bug

" HTML
Plug 'othree/html5.vim'                                 " HTML5 + inline SVG omnicomplete function, indent and syntax for Vim, Based on the default htmlcomplete.vim
Plug 'alvan/vim-closetag'                               " Auto close (X)HTML tags

" CSS
Plug 'ap/vim-css-color'                                 " Preview colours in source code while editing
Plug 'hail2u/vim-css3-syntax'                           " CSS3 syntax (and syntax defined in some way foreign specification)
Plug 'cakebaker/scss-syntax.vim'                        " Vim syntax file for scss (Sassy CSS)
Plug 'groenewege/vim-less'                              " Vim syntax LESS (dynamic CSS)

" js
Plug 'pangloss/vim-javascript'                          "Vastly improved Javascript indentation and syntax support in Vim.
Plug 'elzr/vim-json'                                    "Distinct highlighting of keywords vs values, JSON-specific (non-JS) warnings, quote concealing.
Plug 'mxw/vim-jsx'                                      "React JSX syntax highlighting and indenting for vim.
Plug 'millermedeiros/vim-esformatter'                   "run esformatter from inside vim (automatically formats JavaScript source code)
Plug 'leafgarland/typescript-vim'                       "Typescript syntax files for Vim
Plug 'evanleck/vim-svelte', {'branch': 'main'}
Plug 'prettier/vim-prettier'


"snipmate
Plug 'MarcWeber/vim-addon-mw-utils'                     " interpret a file by function and cache file automatically
Plug 'tomtom/tlib_vim'                                  " Some utility functions for VIM
Plug 'garbas/vim-snipmate'                              " SnipMate.vim aims to be a concise vim script that implements some of TextMate's snippets features in Vim.
Plug 'honza/vim-snippets'                               " snippets files for various programming languages.


" Lightline statusbar
Plug 'itchyny/lightline.vim'
Plug 'millermedeiros/vim-statline'

" GOLANG
" Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries'  }   " Golang for vim,

" colorschemes
Plug 'morhetz/gruvbox'
Plug 'tomasr/molokai'
Plug 'rakr/vim-one'
Plug 'vim-scripts/summerfruit256.vim'

" Typing exercise
Plug 'devinceble/Tortoise-Typing'
"Plug 'ThePrimeagen/vim-be-good'      " only for nvim

" Racket Editor
Plug 'wlangstroth/vim-racket'

" FAQ
Plug 'chrisbra/vim_faq'

call plug#end()



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" BEHAVIOR
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on
filetype plugin indent on                       "enable detection. plugins and indent

" Local dirs (centralize everthing)
set backupdir=~/.vim/backups
set directory=~/.vim/swap


"set path+=**
set path=.,**
set incsearch

set spelllang=en_us                             " spell checking
set encoding=utf-8 nobomb                       " BOM oten cause trouble, UTF-8 is awesome


" --- perfomace /buffer ---
set hidden                                      " can put buffer to the background without writing to disk, will remember history/marks"
set lazyredraw                                  " don't update the display while executimg macros
set ttyfast                                     " send more characters at a give time


" --- History / file handling ---
set history=999                                 " Default -20
set undolevels=999                              " More undo
set autoread                                    " Reload file if changed externally


" --- Backup and swap file ---
set nobackup                                    " Handling E510
set noswapfile                                  " Handling E510
set nowritebackup                               " Handling E510


" --- Search / regexp ---
set gdefault                                    " RegExp global by defaulrg
set magic                                       " Enable extended regexes
set hlsearch                                    " higlight searches
set incsearch                                   " show the best match so far as typed
set ignorecase smartcase                        " make searches unsensitive, unless they contain upper-case letters


" --- Keys ---
set backspace=indent,eol,start                  " Allow backspacing over everything
set esckeys                                     " Allow cursor keys in insert mode
set nostartofline                               " Make j/k respect to columns
" set virtualedit=all
set timeoutlen=500                              " Log it wait for mapped commands
set ttimeoutlen=100                             " Faster timeout for escape key and others


" Use a bar-shaped cursor for insert mode, even through tmux.
if exists('$TMUX')
    let &t_SI ="\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI ="\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI ="\<Esc>]50;CursorShape=1\x7"
    let &t_EI ="\<Esc>]50;CursorShape=0\x7"
endif

" Information for open and close buffer
set viminfo^=%


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" UI
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" --- Molokai setup ---

set t_Co=256                                                         " 256 colors terminal

let g:molokai_original=0
colorscheme molokai
" colorscheme gruvbox                                                " molokai

" make 'var' keyword easier to spot
hi link javascriptType Keyword

" default ColorColumn is too distractive
hi clear ColorColumn
hi link ColorColumn FoldColumn

" defaul line number is too distractive
hi clear LineNr
hi link LineNr Comment
hi link OverLength Error
hi Search          ctermfg=0   ctermbg=222   cterm=reverse

" --- END Molokai setup ---


if has('gui_running')
    " set guifont=Menlo:h13
    set gfn:Monaco:h14
    set transp=0

    " toolbar and scrollbars
    set guioptions-=T                                                " remove toolbar
    set guioptions-=L                                                " left scroll bar
    set guioptions-=r                                                " right scroll bar
    set guioptions-=b                                                " bottom scroll bar
    set guioptions-=h                                                " only calculate bottom scroll size of current line
    set shortmess=atI                                                " Don't show the intro message at start and truncate msgs (avoid press ENTER msgs).
endif


set cursorline                                                       " Highlight current line
set laststatus=2                                                     " Always show status line
set number                                                           " Enable line numbers.
set numberwidth=5                                                    " width of numbers line (default on gvim is 4)
set report=0                                                         " Show all changes.
set showmode                                                         " Show the current mode.
set showcmd                                                          " show partial command on last line of screen.
set showmatch                                                        " show matching parenthesis
set mat=2                                                            " Set how many tenths of a second blink
set splitbelow splitright                                            " how to split new windows.
set title                                                            " Show the filename in the window title bar.

set scrolloff=5                                                      " Start scrolling n lines before horizontal
set so=10                                                            " Set 7 lines to the cursor - when moving vertical border of window.
set sidescrolloff=7                                                  " Start scrolling n chars before end of screen.
set sidescroll=1                                                     " The minimal number of columns to scroll horizontally.

if has('title') && (has('gui_running') || &title)
    set titlestring=
    set titlestring+=%f
    set titlestring+=%h%m%r%w
    set titlestring+=\ -\ %{v:progname}
    set titlestring+=\ -\ %{substitute(getcwd(),\ $HOME,\ '~',\ '')}
endif

" use relative line number by default
if exists('+relativenumber')
    set relativenumber
endif

" " --- UI functions ---
" if &term =~ '256color'
" " disable background color erase
"     set t_ut=
" endif


" --- command completion ---
set wildmenu
set wildmenu wildmode=longest:full,full                              " Hitting TAB in command mode will
set wildchar=<TAB>                                                   " show possible completions.
set wildmode=list:longest
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/node_modules/*
set wildignore+=*.DS_STORE,*.db,node_modules/**,*.jpg,*.png,*.gif
set wildignore+=*/coverage


" --- diff ---
set diffopt=filler                                                   " Add vertical spaces to keep right and left aligned
set diffopt+=iwhite                                                  " Ignonre whitespace changes


" --- folding---
set foldmethod=manual                                                " manual fold
set foldnestmax=3                                                    " deepest fold is 3 levels
set nofoldenable                                                     " don't fold by default


" --- remove sounds effects ---
set noerrorbells
set visualbell


" --- list chars ---
" list spaces and tabs to avoid trailing spaces and mixed indentation
" see key mapping at the end of file to toggle `list`
set listchars=tab:▹\ ,trail:·,nbsp:⚋
set fillchars=fold:-
set list


" highlight conflicts
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" INDENTATION AND TEXT-WRAP
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set expandtab                       " Expand tabs to spaces"
set autoindent smartindent          " Auto/smart indent
set copyindent                      " Copy previous indentation on auto indent
set softtabstop=4                   " Tab key result in # tab not #spaces
set tabstop=4                       " Tab is # tab not # spaces
set shiftwidth=4                    " This # of spaces for indenting
set smarttab                        " At start of line, <Tab> insert shift width spaces, <Bs> delete shift width spaces

set nowrap                          " Do not auto wrap lines
set textwidth=120
set formatoptions=qrn1              " automatic formatiing
set formatoptions-=o                " Don't start new lines w/comment leader on pressing 'o'

set nomodeline                      " Don't use modeline (security)

set pastetoggle=<leader>p           " Paste mode: avoid auto indent, treat chars as literal



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Base Remap keys
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Your leader
let mapleader=","
let maplocalleader=";"

" It easy to Escape rather Ctrl+c or Esc button
:imap ii <Esc>
" Two semicolons are easy to type
imap ;; <Esc>

" Fast saving
nmap <leader>w :w!<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" KEY MAPPING
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" mapleader set at the top of the file to avoid conflicts


" --- FIX/IMPROVE DEFAULT BEHAVIOR ---

" avoid mistyping commands
command! W w
command! Wq wq
command! Bd bd

" Split line (sister to [J]oin lines)
" The normal use of S is covered by cc, so don't worry about shadowing
nnoremap S i<cr><esc><right>


" movement by screen line instead of file line (for text wrap)
nnoremap j gj
nnoremap <down> gj
nnoremap k gk
nnoremap <up> gk


" Swap v and CTRL-V, because Block mode is more useful than Visual mode
nnoremap v <c-V>
nnoremap <c-V> v
vnoremap v <c-V>
vnoremap <c-V> v


" next tab
nnoremap <C-Tab> :tabn<CR>


" automatic esc, really uncommon to type jj,jk
inoremap jj <ESC>
inoremap jk <Esc>

" Faster scrolling
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Bubble single lines, similar to Eclipse (requires unimpaired.vim)
nmap <C-Up> [e
nmap <C-Down> ]e

" Bubble multiple lines, similar to Eclipse (requires unimpaired.vim)
vmap <C-Up> [egv
vmap <C-Down> ]egv

" Duplicate lines, similar to Eclipse
noremap <C-S-Up> YP
noremap <C-S-Down> YP

" 'fix' search regexp to be compatible with Perl format
" nmap / /\v
" vmap / /\v

" Use the damn hjkl keys
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>

" Improve the 'search word under cursor' behavior
nnoremap * :silent call KeywordsAll()<CR> *
nnoremap # :silent call KeywordsAll()<CR> #


" --- COMMON STUFF / HELPERS ---

" Toggle show tabs and trailing spaces
nnoremap <leader>c :set nolist!<CR>

" Clear the search highlight
nnoremap <silent> \ :silent nohlsearch<CR>

" text wrap: Hard wrap paragraph text (similar to TextMate Ctrl+Q)
nnoremap <leader>tw gqip
nnoremap <leader>nw :set nowrap<CR>

" Open file (useful for HTML)
noremap <silent> <leader>o :!open %<CR>

" Reformat code
nnoremap <leader>rf gg=G

" I use retab too much and it's hard to type
nnoremap <leader>rt :retab!<CR>

" Pull word under cursor into LHS of a substitute (find and replace)
nnoremap <leader>rr :silent call KeywordsAll()<CR> :%s#\<<C-r>=expand("<cword>")<CR>\>#

" Insert/append a single character
" noremap ,, i_<esc>r
" noremap ;; a_<esc>r

" Visually select the text that was last edited/pasted
nnoremap <leader>v `[v`]

" Fast Ack | work with ack.vim
nnoremap <leader>a :tab split<CR>:Ack<Space>
nnoremap <leader>aw :silent call KeywordsAll()<CR> :tab split<CR>:Ack<cword><CR> :silent call KeywordsBasic()<CR>

" Toggle spelling hints
nnoremap <silent> <leader>ts :set spell!<CR>

" Move between splits (windows)
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" Move windows around (only works on same row)
noremap <C-S-Right> <C-w>r
noremap <C-S-Left> <C-w>R

" Open current buffer in a new split
noremap <leader>s :vsplit<cr>
noremap <leader>i :split<cr>

" Close window
noremap <leader>q :clo<CR>

" Selete buffer but keep window open (requires bufkill.vim)
map <leader>bd :Bd<CR>

" Smarter next/prev buffer (requires bufkill.vim)
map <leader>bn :BF<CR>
map <leader>bp :BB<CR>

" Resize splits (http://vim.wikia.com/wiki/Resize_splits_more_quickly)
nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>

" Move between splits (windows)
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" Move windows around (only works on same row)
noremap <C-S-Right> <C-w>r
noremap <C-S-Left> <C-w>R

" Open current buffer in a new split
noremap <leader>s :vsplit<cr>
noremap <leader>i :split<cr>

" Resize splits (http://vim.wikia.com/wiki/Resize_splits_more_quickly)
nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>


" add spaces inside current parenthesis
map <leader>( vi(xi  P) )


" --- requires(vim-instant-markdown)  ---
nmap <leader>mp :MarkdownPreview<CR>
nmap <leader>MP :MarkdownPreviewStop<CR>

" set paste mode
nnoremap <leader>ps :set paste<CR>
nnoremap <leader>PS :set nopaste<CR>



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGINS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" --- NERDTree ----
let NERDTreeIgnore=['.DS_Store']
let NERDTreeShowBookmarks=0         "show bookmarks on startup
let NERDTreeHighlightCursorline=1   "Highlight the selected entry in the tree
let NERDTreeShowLineNumbers=0
let NERDTreeMinimalUI=1
let NERDTreeWinSize=20
noremap <leader>nt :NERDTreeToggle<CR>
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif


" --- NERDCommenter ---
let NERDSpaceDelims=1               " space around delimiters
let NERDRemoveExtraSpaces=1
let g:NERDCustomDelimiters = {
    \ 'scss': { 'left': '//' }
\ }



" --- Syntastic : Linting / Error check ---
let g:syntastic_auto_loc_list=2
let g:syntastic_check_on_open=1
" close/open location list (errors)
noremap <silent><leader>lc :lcl<CR>
noremap <silent><leader>lo :Errors<CR> :lw<CR>
noremap <silent><leader>ln :lnext<CR>
noremap <silent><leader>lp :lprev<CR>

" let g:syntastic_javascript_checkers = ['eslint']
" let g:syntastic_javascript_eslint_exec = 'eslintme'
" let g:syntastic_javascript_eslint_generic = 1


" --- autocomplete / supertab / jscomplete ---
set infercase
set completeopt=longest,menuone
set omnifunc=syntaxcomplete#Complete
set completefunc=syntaxcomplete#Complete
set complete=.,w,b,u,U,t,i,d
" see [autocommands] at the end for more autocomplete settings



" XXX NOTE: THIS NEED  --myhere/vim-nodejs-complete -- XXX
" nodejs-complete / jscomplete
" let g:node_usejscomplete = 1
" let g:jscomplete_use = ['dom', 'moz']

" let g:SuperTabMappingForward = '<s-Tab>'
" let g:SuperTabMappingBackward = '<s-c-Tab>'
" let g:SuperTabLongestEnhanced = 1
" let g:SuperTabDefaultCompletionType = "<c-p>"



" XXX NOTE: FIXME XXX Fri Jan  8 01:59:21 PM WIB 2021
" --- Plug 'easymotion/vim-easymotion' ---
" nmap f <Plug>(easymotion-overwin-f2)
" map / <Plug>(easymotion-bd-jk)
" nmap / <Plug>(easymotion-overwin-line)

" XXX THIS THE OLD STUFF KEY_BINDING XXX
" let g:EasyMotion_leader_key = '<Leader>m'
" " lets make <leader>F and <leader>f use easymotion by default
" let g:EasyMotion_mapping_f = '<leader>f'
" let g:EasyMotion_mapping_F = '<leader>F'


" --- Strip trailing whitespace ---
function! StripWhitespace ()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    :%s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfunction

" Trailing white space (strip spaces)
noremap <leader>ss :call StripWhitespace()<CR>


" --- matchit --- XXX NOTE: NEED RESEARCH XXX
runtime macros/plugin/matchit.vim          " enable matchit (better '%' key mapping)

" --- Plug 'ap/vim-css-color' ---
let g:cssColorVimDoNotMessMyUpdatetime = 1

" --- Plug 'mhinz/vim-signify' ---
let g:signify_update_on_focusgained = 1


" --- Command-T ---
" let g:CommandTMaxFiles=2000
" let g:CommandTMaxHeight=12
" noremap <silent> <leader>tt :CommandT<CR>
" noremap <silent> <leader>bt :CommandTBuffer<CR>
" noremap <silent> <leader>tf :CommandTFlush<CR>"


" --- Plug 'ctrlpvim/ctrlp.vim' ---
let g:ctrlp_working_path_mode = 0
let g:ctrlp_switch_buffer = 0
noremap <silent> <leader>tt :CtrlP<CR>
noremap <silent> <leader>bt :CtrlPBuffer<CR>
noremap <silent> <leader>tf :CtrlPClearCache<CR>


" --- LustyJuggler ---
let g:LustyJugglerSuppressRubyWarning = 1  " avoid error if running on terminal


" --- Plug 'millermedeiros/vim-statline' ---
" errors color
hi User3 guifg=#FFFFFF guibg=#FF0000 gui=bold ctermfg=15 ctermbg=1 cterm=bold
let g:statline_fugitive = 1
let g:statline_filename_relative = 1
let g:statline_mixed_indent_string = '[mix]'

" --- Plug 'sjl/gundo.vim' ---
if has('python3')
    let g:gundo_prefer_python3 = 1
endif

nnoremap <leader>gu :GundoToggle<CR>
let g:gundo_right = 1
let g:gundo_preview_bottom = 1


" --- toggle indentation mode ---
function! ToggleExpandTab()
    if &et
        set noet softtabstop=0
    else
        execute "set et softtabstop=". &tabstop
    endif
endfunction

noremap <silent> <leader>et :call ToggleExpandTab()<CR>


" --- Show syntax highlighting groups for word under cursor ---
" http://vimcasts.org/episodes/creating-colorschemes-for-vim/
nnoremap <leader>sh :call <SID>SynStack()<CR>
function! <SID>SynStack()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc


" faster when opening files with large lines
set synmaxcol=300


" --- Highlight word under cursor ---
" hi W1 guibg=#aeee00 guifg=#000000 ctermbg=154 ctermfg=16
" nnoremap <silent> <leader>h1 :execute 'match W1 /\<<c-r><c-w>\>/'<cr>


" --- Plug 'godlygeek/tabular' ---
noremap <silent> <leader>t: :Tabularize /:<CR>
noremap <silent> <leader>t= :Tabularize /=<CR>
noremap <silent> <leader>t, :Tabularize /,<CR>
noremap <silent> <leader>t{ :Tabularize /{<CR>
noremap <silent> <leader>t" :Tabularize /"<CR>
noremap <silent> <leader>t' :Tabularize /'<CR>
noremap <silent> <leader>t[ :Tabularize /[<CR>
noremap <silent> <leader>t/ :Tabularize ///<CR>
noremap <silent> <leader>t\| :Tabularize /\|<CR>

" --- include content of static files ---
" borrowed from: http://vim.1045645.n5.nabble.com/vim-counterpart-for-persistent-includes-td4276915.html
function! IncludeStatic()
    :g/<!-- #include "[^"]*" -->\_.\{-}<!-- end include -->/let fname = matchstr(getline('.'),'<!-- #include "\zs[^"]*\ze" -->')|exec '+,/<!-- end include -->/-!cat '.fnameescape(fname)
endfunction

noremap <silent> <leader>ic :call IncludeStatic()<CR>



" --- convert selected text from markdown to HTML ---
vnoremap <silent> <leader>md :! mdow

function! SanitizeMdown()
    %s/<\/\?p>//
    %s/<br \?\/\?>/ /
    %s/<pre><code>/<pre class="brush:js">\r/
    %s/<\/code><\/pre>/<\/pre>/
endfunc
noremap <silent> <leader>mds :call SanitizeMdown()<CR>


" --- Plug 'millermedeiros/vim-esformatter' ---
nnoremap <silent> <leader>es :Esformatter<CR>
vnoremap <silent> <leader>es :EsformatterVisual<CR>



" --- toggle autocomplete behavior and word delimiters ---

" better auto complete for CSS class names
" more info: http://blog.millermedeiros.com/vim-css-complete/

function! KeywordsAll()
    setl iskeyword=@,48-57,192-255,\@,\$,%,-,_
endfunc

function! KeywordsBasic()
    setl iskeyword=@,48-57,192-255
endfunc



" --- visual block move ---
" http://www.youtube.com/watch?v=aHm36-na4-4#t=35m10

let g:DVB_TrimWS = 1
vmap  <expr>  <S-LEFT>   DVB_Drag('left')
vmap  <expr>  <S-RIGHT>  DVB_Drag('right')
vmap  <expr>  <S-DOWN>   DVB_Drag('down')
vmap  <expr>  <S-UP>     DVB_Drag('up')
vmap  <expr>  D          DVB_Duplicate()


" --- transform lists ---
" http://www.youtube.com/watch?v=aHm36-na4-4#t=17m30

nmap <leader>ls :call ListTrans_toggle_format()<CR>
vmap <leader>ls :call ListTrans_toggle_format('visual')<CR>






" --- limelight.vim ---
" Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#777777'
let g:limelight_default_coefficient = 0.7
let g:limelight_paragraph_span = 1
let g:limelight_bop = '^\s'
let g:limelight_eop = '\ze\n^\s'
let g:limelight_priority = -1


" --- Plug 'suan/vim-instant-markdown' ---
let g:instant_markdown_autostart = 0


" --- Plug 'pangloss/vim-javascript' ---
let g:javascript_plugin_jsdoc = 1



" --- Plug 'fatih/vim-go' ---
set autowrite

"  Go syntax highlighting
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_operators = 1

" Auto formatting and importing
let g:go_fmt_autosave = 1
let g:go_fmt_command = "goimports"

" Status line types/signatures
let g:go_auto_type_info = 1

" Run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
    let l:file = expand('%')
    if l:file =~# '^\f\+_test\.go$'
        call go#test#Test(0, 1)
    elseif l:file =~# '^\f\+\.go$'
        call go#cmd#Build(0)
    endif
endfunction

" Map keys for most used commands.
" Ex: `\b` for building, `\r` for running and `\b` for running test.
augroup go_cmds
    autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
    autocmd FileType go nmap <leader>r  <Plug>(go-run)
    autocmd FileType go nmap <leader>t  <Plug>(go-test)
augroup END


" --- Plug 'wlangstroth/vim-racket' ---
if has("autocmd")
    au BufReadPost *.rjtm *.rktl set filetype=racket
    au filetype racket set lisp
    au filetype racket set autoindent
endif


" --- Plug 'yggdroot/indentline' ---
let g:indentLine_setColors = 1
let g:indentLine_char_list = ['|', '¦', '┆', '┊']


" Prevent conceal links
let g:vim_json_syntax_conceal = 0
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0


" --- Plug 'alvan/vim-closetag' ---
let g:closetag_filenames = '*.html, *.xhtml, *.phtml, *svelte, *js, *.tsx'
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx'
let g:closetag_filetypes = 'html,xhtml,phtml'
let g:closetag_xhtml_filetypes = 'xhtml,jsx'
let g:closetag_emptyTags_caseSensitive = 1
let g:closetag_regions = {
            \ 'typescript.tsx': 'jsxRegion,tsxRegion',
            \ 'javascript.jsx': 'jsxRegion',
            \ }
let g:closetag_shortcut = '>'
let g:closetag_close_shortcut = '<leader>>'


" --- Plug 'tpope/vim-markdown' ----
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']
let g:markdown_syntax_conceal = 0
let g:markdown_minlines = 100

" --- Plug 'valloric/youcompleteme' ---

" --- coc-snippets ---
imap <C-l> <Plug>(coc-snippets-expand)
vmap <C-j> <Plug>(coc-snippets-select)
let g:coc_snippet_next = '<c-j>'
let g:coc_snippet_prev = '<c-k>'
imap <C-j> <Plug>(coc-snippets-expand-jump)
xmap <leader>x  <Plug>(coc-convert-snippet)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FILE HANDLING
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" [autocommands] borrowed from @bit-theory vimfiles and edited
augroup mm_buf_cmds
    " clear commands before resetting
    autocmd!

    " when vimrc is edited, reload it
    autocmd bufwritepost .gvimrc source %
    autocmd bufwritepost .vimrc source %

    " Only show cursorline in the current window and in normal mode
    au WinLeave,InsertEnter * set nocul
    au WinEnter,InsertLeave * set cul

    " filetype
    autocmd BufNewFile,BufRead *.json setf json
    autocmd BufNewFile,BufRead *.hx setf haxe

    autocmd FileType mustache runtime! ftplugin/html/sparkup.vim

    " Enable omnicomplete for supported filetypes
    autocmd FileType css,scss setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags

    " autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    " jscomplete is a separate plugin
    autocmd FileType javascript setlocal omnifunc=jscomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

    " make `gf` search for .js files
    autocmd FileType javascript,javascript.jsx setlocal suffixesadd=.js
    autocmd FileType javascript,javascript.jsx setlocal path+=js,scripts,src

    " make sure `complete` works as expected for CSS class names without
    " messing with motions (eg. '.foo-bar__baz') and we make sure all
    " delimiters (_,-,$,%,.) are treated as word separators outside insert mode
    autocmd InsertEnter,BufLeave * :silent call KeywordsAll()
    autocmd InsertLeave,BufEnter * :silent call KeywordsBasic()

    " yes, we need to duplicate it on VimEnter for some weird reason
    autocmd VimEnter * nnoremap * :silent call KeywordsAll()<CR> *
    autocmd VimEnter * nnoremap # :silent call KeywordsAll()<CR> #

    " Toggle relative/absolute line numbers during edit
    " if exists('+relativenumber')
    " autocmd InsertEnter * setl nu
    " autocmd InsertLeave,BufEnter * setl rnu
    " endif

    " highlight char at column 121 (textwidth + 1)
    autocmd BufEnter * match OverLength /\%121v/

    " Color Column (only on insert)
    if exists("&colorcolumn")
        autocmd InsertEnter * set colorcolumn=120
        autocmd InsertLeave * set colorcolumn=""
    endif

    " Automatically removing all trailing whitespace
    autocmd BufWritePre * %s/\s\+$//e

augroup END

augroup mm_buf_cmds_proto
    " clear commands before resetting
    autocmd!



    " Enable coc-highlight
    " autocmd CursorHold * silent call CocActionAsync('highlight')
augroup END

" FIXME: YAML setup
" augroup yamlcmds
"     autocmd BufReadPost *yaml,*yml colorscheme molokai
"     autocmd BufWinLeave *yaml,*yml colorscheme molokai
"     autocmd BufReadPost *.yaml,*.yml set sw=4 ts=4 sts=4 expandtab
"     autocmd Bufwritepre *.yaml,*.yml silent! %s/\s\+$// " Remove trailing whitespace
"     autocmd BufwritePre *.yaml,*yml silent! %s/^\(\s*\)#\(\S\)/\1# \2/g
"     autocmd BufwritePre *.yaml,*yml silent! %s/^\(\s*\)#\(\w\)/\1- \2/g
" augroup END
