#+title Emacs from scracth configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Package System Setup

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("Org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  #+end_src

* Basic UI Configuration

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)    ; disable visible scroolbal
  (tool-bar-mode -1)      ; disable the toolbar
  (tooltip-mode -1)       ; disable tooltips
  (menu-bar-mode -1)      ; disabnle menu bar
  (set-fringe-mode 10)    ; give some breathing

  (electric-pair-mode 1)  ; auto-closing brackets
  (auto-revert-mode 1)    ; refresh the file if has changed

  ;; inhibit cl (Common Lisp) warning
  ;;(setq byte-compile-warnings '(cl-functions))

  ;; set up the visible bell
  (setq visible-bell t)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; launch emacs as full screen
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Disable line numbers for some modes
  ;;org-mode-hook
  (dolist (mode '(term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font Configuration

#+begin_src emacs-lisp

  ;; FONT CONFIGURATION ------------------------------------------------------------
  ;;(set-face-attribute 'default nil :font "Source Code Pro" :pixelsize=13)
  (set-face-attribute 'default nil :font "Source Code Pro" :height 90)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Source Code Pro" :height 90)

  ;; Set the variables pitch face
  (set-face-attribute 'variable-pitch nil :font "Source Code Pro" :height 90 :weight 'regular)

#+end_src

* Keybinding Configuration

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-create-definer efs/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (efs/leader-keys
     "t" '(:ignore t :which-key "toggles")
     "tt" '(counsel-load-theme :which-key "choose theme")))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'message-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))

#+end_src

* UI Configuration
** Command Log Mode

#+begin_src emacs-lisp

  (use-package command-log-mode
    :commands command-log-mode)

#+end_src

** Ivy and Counsel

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :demand
    :bind (;;("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

#+end_src

** Helpful Help Commands

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  ;; EXAMPLE:
  ;; "C-s" 'counsel-grep-or-swiper)
  ;;(general-define-key
  ;;"C-M-j" 'counsel-switch-buffer)

#+end_src

** Text Scaling

#+begin_src emacs-lisp

  (use-package hydra
    :defer t)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (efs/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

* Org Mode
** Basic Config
#+begin_src emacs-lisp
  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " â–¾" )

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    ;; NOTE: in LISP (') a single quote treat as a "list" not a "function call".
    ;; scheduling an agenda on 'org-agenda'
    ;; Repeated Tasks - https://orgmode.org/manual/Repeated-tasks.html#Repeated-tasks
    (setq org-agenda-files
          '("~/.emacs.d/OrgFiles/Task.org"
            "~/.emacs.d/OrgFiles/Birthdays.org"
            "~/.emacs.d/OrgFiles/Notes.org"
            "~/.emacs.d/OrgFiles/Habits.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Task.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    ;; Custom TODO states and Agendas
    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-tag-alist
          '((:startgroup)
            ;; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))


    ;;Agenda query documentation: https://orgmode.org/manual/Custom-Agenda-Views.html#Custom-Agenda-Views
    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ;; '-' minus sign with tag name to remove 'email' in a list
            ("W" "Work Tasks" tags-todo "+work-email")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/.emacs.d/OrgFiles/Task.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
            ;;("ts" "Clocked Entry Subtask" entry (clock)
            ;;"* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/.emacs.d/OrgFiles/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/.emacs.d/OrgFiles/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/.emacs.d/OrgFiles/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline "~/.emacs.d/OrgFiles/Metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))


    ;; Bindings straight to 'org-capture' - journal templates
    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))

    (setq org-clock-sound "~/Downloads/ding.wav")

    (efs/org-font-setup))
#+end_src

** Structure Templates

#+begin_src emacs-lisp

  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("js" . "src js"))

#+end_src

** Configure Babel Languages

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

** Auto-tangle Configuration Files

#+begin_src emacs-lisp

  ;; ORG MODE CONFIGURATION ------------------------------------------------------------
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        ;;"/home/daun/.emacs.d/Emacs.org"
                        (expand-file-name "~/.emacs.d/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

* Development
** Projectile

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Project")
      (setq projectile-project-search-path '("~/Project")))
    (setq proejctile-switch-project-action #'projecttile-dired))

  ;; most often 'counsel-projectile' package use for searching with 'rgrep'
  ;; with this 'counsel-projectile-rg' function
  ;; and you can bind it into another self buffer with combine key (C-c s r) + (C-c C-o)
  ;; and you would also possible to press key 'M-o' in every rgrep result
  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

** Magit

#+begin_src emacs-lisp

  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))


  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)
#+end_src

* Applications
** Some Apps

This is an example of configuring another non-Emacs application using org-mode. Not only do we write out the configuration at =.config/some-app/config=, we also compute the value that gets stored in this configuration from the Emacs Lisp block above it.

#+NAME: the-value1
#+begin_src emacs-lisp :noweb yes
  55
#+end_src

#+NAME: the-value2
#+begin_src emacs-lisp :noweb yes
  (+ 55 100)
#+end_src

Add =:noweb yes=!

#+begin_src conf :tangle .config/some-app/config :noweb yes

  the-value1 = <<the-value1>>

  the-value2 = <<the-value2()>>

#+end_src


