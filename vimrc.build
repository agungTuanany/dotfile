"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" -----------------------------------------------------------------------------
" Agung Tuanany .init.vim (nvim) file
" -----------------------------------------------------------------------------
"
" Last Edited       : Tue Jan  5 05:46:22 AM WIB 2021
"
" -----------------------------------------------------------------------------
"  Heavily inspired by: @millermedeiros
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MANAGE PLUGINS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible " required
filetype off     " required

" Base runtime
call plug#begin('~/.vim/plugged')

" Core Plugs
Plug 'ctrlpvim/ctrlp.vim'                             " Full path Fuzzy file, buffer, mru, tag .. Finder for vim
Plug 'neoclide/coc.nvim'                              " Make vim smart as VSCOde
Plug 'scrooloose/nerdtree'                            " A File system explorer
Plug 'scrooloose/nerdcommenter'                       " Comments function
Plug 'godlygeek/tabular'                              " Line up text
Plug 'jiangmiao/auto-pairs'                           " Insert, or delete bracket, parens, quotes in pair
Plug 'christoomey/vim-tmux-navigator'                 " Seamless navigation between tmux panes and vim split
Plug 'terryma/vim-multiple-cursors'                   " Multiple selection
Plug 'tpope/vim-surround'                             " easy surrounding everything
Plug 'tpope/vim-unimpaired'                           " Pairs handy brackets. XXX@NOTE: Implemented with NVIM
Plug 'junegunn/limelight.vim'                         " Hyperfocus-writing in Vim
Plug 'ervandew/supertab'                              " Vim plugin which allow to use <Tab> for all insert completion needs (:help ins-completion)
Plug 'tpope/vim-repeat'                               " Enable repeating supported plugins maps with '.'
Plug 'tpope/vim-abolish'                              " Easily search for, substitute, and abbreviate multiple variants of word
Plug 'tpope/vim-markdown'                             " Vim Markdown runtime files
Plug 'tpope/vim-speeddating'                          " Use CTRL_A/CTR_X to increment dates, times, and more
Plug 'tpope/vim-surround'                             " Quoting / parenthesizing made simple
Plug 'tpope/vim-unimpaired'                           " Pairs of handy bracket mappings   XXX @note NVIM has implement this. Are you still need this? XXX
Plug 'tpope/vim-commentary'                           " Comment stuff out
Plug 'tpope/vim-fugitive'                             " A Git wrapper
Plug 'int3/vim-extradite'                             " A git commit browser for Vim. Extends fugitive.vim
Plug 'mhinz/vim-signify'                              " Show diff using Vim its sign columns
Plug 'sjl/clam.vim'                                   " Lightweight Vim plugin to easily run shell commands
Plug 'junegunn/goyo.vim'                              " Distraction-free writing in Vim
Plug 'sheerun/vim-polyglot'                           " A collection of language packs for vim
Plug 'vim-scripts/bufkill.vim'                        " Unload/delete/wipe a buffer, keep its window(s), display last accessed buffer(s)
Plug 'yggdroot/indentline'                            " For displaying thin vertical lines at each indentation level for code indented with spaces

" Lightline statusbar
Plug 'itchyny/lightline.vim'
Plug 'millermedeiros/vim-statline'

Plug 'suan/vim-instant-markdown', {'for': 'markdown'} " Markdown live preview

" HTML
Plug 'othree/html5.vim'                               " HTML5 + inline SVG omnicomplete function, indent and syntax for Vim, Based on the default htmlcomplete.vim
Plug 'alvan/vim-closetag'                             " Auto close (X)HTML tags

" CSS
Plug 'ap/vim-css-color'                               " Preview colours in source code while editing
Plug 'hail2u/vim-css3-syntax'                         " CSS3 syntax (and syntax defined in some way foreign specification)
Plug 'cakebaker/scss-syntax.vim'                      " Vim syntax file for scss (Sassy CSS)
Plug 'groenewege/vim-less'                            " Vim syntax LESS (dynamic CSS)

" JS
Plug 'pangloss/vim-javascript'
Plug 'leafoftree/vim-svelte-plugin'
Plug 'prettier/vim-prettier', {'do': 'yarn install'}
Plug 'millermedeiros/vim-esformatter'

" GOLANG
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries'  }   " Golang for vim,

" colorschemes
Plug 'morhetz/gruvbox'
Plug 'tomasr/molokai'
Plug 'rakr/vim-one'
Plug 'vim-scripts/summerfruit256.vim'

" Typing exercise
Plug 'devinceble/Tortoise-Typing'
"Plug 'ThePrimeagen/vim-be-good'      " only for nvim

" Racket Editor
Plug 'wlangstroth/vim-racket'

call plug#end()






"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" BEHAVIOR
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on
filetype plugin indent on
"set path+=**
set path=.,**
set incsearch

set spelllang=en_us
set encoding=utf-8 nobomb

" --- History / file handling ---
set history=999                                 " Default -20
set undolevels=999                              " More undo
set autoread                                    " Reload file if changed externally


" --- Backup and swap file ---
set nobackup                                    " Handling E510
set noswapfile                                  " Handling E510
set nowritebackup                               " Handling E510

" --- Search / regexp ---
set gdefault                                    " RegExp global by defaulrg
set magic                                       " Enable extended regexes
set hlsearch                                    " higlight searches
set ignorecase smartcase                        " make searches unsensitive, unless they contain upper-case letters

" --- Keys ---
set backspace=indent,eol,start                  " Allow backspacing over everything
" set esckeys                                   " Allow cursor keys in insert mode
set nostartofline                               " Make j/k respect to columns
" set virtualedit=all
set timeoutlen=500                              " Log it wait for mapped commands
set ttimeoutlen=100                             " Faster timeout for escape key and others


" Use a bar-shaped cursor for insert mode, even through tmux.
if exists('$TMUX')
    let &t_SI ="\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI ="\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI ="\<Esc>]50;CursorShape=1\x7"
    let &t_EI ="\<Esc>]50;CursorShape=0\x7"
endif

" Information for open and close buffer
set viminfo^=%


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" UI
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set t_Co=256                                                         " 256 colors terminal

let g:molokai_original=0
colorscheme molokai
" colorscheme gruvbox                                                " molokai

" make 'var' keyword easier to spot
hi link javascriptType Keyword
" default ColorColumn is too distractive
hi clear ColorColumn
hi link ColorColumn FoldColumn
" defaul line number is too distractive
hi clear LineNr
hi link LineNr Comment
hi link OverLength Error


" --- command completion ---
set wildmenu
set wildmenu wildmode=longest:full,full                              " Hitting TAB in command mode will
set wildchar=<TAB>                                                   " show possible completions.
set wildmode=list:longest
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/node_modules/*
set wildignore+=*.DS_STORE,*.db,node_modules/**,*.jpg,*.png,*.gif
set wildignore+=*/coverage


" --- diff ---
set diffopt=filler                                                   " Add vertical spaces to keep right and left aligned
set diffopt+=iwhite                                                  " Ignonre whitespace changes

" --- folding---
set foldmethod=manual                                                " manual fold
set foldnestmax=3                                                    " deepest fold is 3 levels
set nofoldenable                                                     " don't fold by default

" --- remove sounds effects ---
set noerrorbells
set visualbell

" --- list chars ---
" list spaces and tabs to avoid trailing spaces and mixed indentation
" see key mapping at the end of file to toggle `list`
set listchars=tab:▹\ ,trail:·,nbsp:⚋
set fillchars=fold:-
set list

set cursorline                                                       " Highlight current line
set laststatus=2                                                     " Always show status line
set number                                                           " Enable line numbers.
set numberwidth=5                                                    " width of numbers line (default on gvim is 4)
set report=0                                                         " Show all changes.
set showmode                                                         " Show the current mode.
set showcmd                                                          " show partial command on last line of screen.
set showmatch                                                        " show matching parenthesis
set mat=2                                                            " Set how many tenths of a second blink
set splitbelow splitright                                            " how to split new windows.
set title                                                            " Show the filename in the window title bar.

set scrolloff=5                                                      " Start scrolling n lines before horizontal
set so=10                                                            " Set 7 lines to the cursor - when moving vertical border of window.
set sidescrolloff=7                                                  " Start scrolling n chars before end of screen.
set sidescroll=1                                                     " The minimal number of columns to scroll horizontally.

" highlight conflicts
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'


" --- UI functions ---
if &term =~ '256color'
" disable background color erase
    set t_ut=
endif

if has('gui_running')
" set guifont=Menlo:h13
    set gfn:Monaco:h14
    set transp=0
" toolbar and scrollbars
    set guioptions-=T                                                " remove toolbar
    set guioptions-=L                                                " left scroll bar
    set guioptions-=r                                                " right scroll bar
    set guioptions-=b                                                " bottom scroll bar
    set guioptions-=h                                                " only calculate bottom scroll size of current line
    set shortmess=atI                                                " Don't show the intro message at start and truncate msgs (avoid press ENTER msgs).
endif

if has('title') && (has('gui_running') || &title)
    set titlestring=
    set titlestring+=%f
    set titlestring+=%h%m%r%w
    set titlestring+=\ -\ %{v:progname}
    set titlestring+=\ -\ %{substitute(getcwd(),\ $HOME,\ '~',\ '')}
endif

" use relative line number by default
if exists('+relativenumber')
    set relativenumber
endif

set statusline^=%{coc#status()}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Base Remap keys
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Your leader
let mapleader=","
let maplocalleader=";"

" It easy to Escape rather Ctrl+c or Esc button
:imap ii <Esc>
" Two semicolons are easy to type
imap ;; <Esc>

" Fast saving
nmap <leader>w :w!<cr>



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" INDENTATION AND TEXT-WRAP
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead tabs
set expandtab
" Be smart when using tabs
set smarttab
set autoindent smartindent
set copyindent
set softtabstop=4
set tabstop=4
set shiftwidth=4

set nowrap
set textwidth=80
set formatoptions=qrn1      " automatic formatiing


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" KEY MAPPING
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" mapleader set at the top of the file to avoid conflicts


" --- FIX/IMPROVE DEFAULT BEHAVIOR ---

" avoid mistyping commands
command! W w
command! Wq wq
command! Bd bd

" Split line (sister to [J]oin lines)
" The normal use of S is covered by cc, so don't worry about shadowing
nnoremap S i<cr><esc><right>

" movement by screen line instead of file line (for text wrap)
nnoremap j gj
nnoremap <down> gj
nnoremap k gk
nnoremap <up> gk

" Swap v and CTRL-V, because Block mode is more useful than Visual mode
nnoremap v <c-V>
nnoremap <c-V> v
vnoremap v <c=V>
vnoremap <c-V> v

" next tab
nnoremap <C-Tab> :tabn<CR>

" automatic esc, really uncommon to type jj,jk
inoremap jj <ESC>
inoremap jk <Esc>

" Faster scrolling
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Bubble single lines, similar to Eclipse (requires unimpaired.vim)
nmap <C-Up> [e
nmap <C-Down> ]e

" Bubble multiple lines, similar to Eclipse (requires unimpaired.vim)
vmap <C-Up> [egv
vmap <C-Down> ]egv

" Duplicate lines, similar to Eclipse
noremap <C-S-Up> YP
noremap <C-S-Down> YP

" 'fix' search regexp to be compatible with Perl format
" nmap / /\v
" vmap / /\v

" Use the damn hjkl keys
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>

" Improve the 'search word under cursor' behavior
nnoremap * :silent call KeywordsAll()<CR> *
nnoremap # :silent call KeywordsAll()<CR> #


" --- COMMON STUFF / HELPERS ---

" Toggle show tabs and trailing spaces
nnoremap <leader>c :set nolist!<CR>

" Clear the search highlight
nnoremap <silent> \ :silent nohlsearch<CR>

" text wrap: Hard wrap paragraph text (similar to TextMate Ctrl+Q)
nnoremap <leader>tw gqip
nnoremap <leader>nw :set nowrap<CR>

" Open file (useful for HTML)
noremap <silent> <leader>o :!open %<CR>

" Reformat code
nnoremap <leader>rf gg=G

" I use retab too much and it's hard to type
nnoremap <leader>rt :retab!<CR>

" Pull word under cursor into LHS of a substitute (find and replace)
nnoremap <leader>rr :silent call KeywordsAll()<CR> :%s#\<<C-r>=expand("<cword>")<CR>\>#

" Insert/append a single character
" noremap ,, i_<esc>r
" noremap ;; a_<esc>r

" Visually select the text that was last edited/pasted
nnoremap <leader>v `[v`]

" Fast Ack
nnoremap <leader>a :tab split<CR>:Ack<Space>
nnoremap <leader>aw :silent call KeywordsAll()<CR> :tab split<CR>:Ack<cword><CR> :silent call KeywordsBasic()<CR>

" Toggle spelling hints
nnoremap <silent> <leader>ts :set spell!<CR>

" Move between splits (windows)
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" Move windows around (only works on same row)
noremap <C-S-Right> <C-w>r
noremap <C-S-Left> <C-w>R

" Open current buffer in a new split
noremap <leader>s :vsplit<cr>
noremap <leader>i :split<cr>

" Close window
noremap <leader>q :clo<CR>

" Selete buffer but keep window open (requires bufkill.vim)
map <leader>bd :Bd<CR>

" Smarter next/prev buffer (requires bufkill.vim)
map <leader>bn :BF<CR>
map <leader>bp :BB<CR>

" Resize splits (http://vim.wikia.com/wiki/Resize_splits_more_quickly)
nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>

" Move between splits (windows)
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" Move windows around (only works on same row)
noremap <C-S-Right> <C-w>r
noremap <C-S-Left> <C-w>R

" Open current buffer in a new split
noremap <leader>s :vsplit<cr>
noremap <leader>i :split<cr>

" Resize splits (http://vim.wikia.com/wiki/Resize_splits_more_quickly)
nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>

" --- requires(vim-instant-markdown)  ---
nmap <leader>mp :InstantMarkdownPreview<CR>

" set paste mode
nnoremap <leader>ps :set paste<CR>
nnoremap <leader>PS :set nopaste<CR>



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGINS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" --- NERDTree ----
let NERDTreeIgnore=['.DS_Store']
let NERDTreeShowBookmarks=0         "show bookmarks on startup
let NERDTreeHighlightCursorline=1   "Highlight the selected entry in the tree
let NERDTreeShowLineNumbers=0
let NERDTreeMinimalUI=1
let NERDTreeWinSize=20
noremap <leader>nt :NERDTreeToggle<CR>
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif


" --- NERDCommenter ---
let NERDSpaceDelims=1               " space around delimiters
let NERDRemoveExtraSpaces=1
let g:NERDCustomDelimiters = {
            \ 'scss': { 'left': '//' }
            \ }


" --- Plug 'godlygeek/tabular' ---
noremap <silent> <leader>t: :Tabularize /:<CR>
noremap <silent> <leader>t= :Tabularize /=<CR>
noremap <silent> <leader>t, :Tabularize /,<CR>
noremap <silent> <leader>t{ :Tabularize /{<CR>
noremap <silent> <leader>t" :Tabularize /"<CR>
noremap <silent> <leader>t' :Tabularize /'<CR>
noremap <silent> <leader>t[ :Tabularize /[<CR>
noremap <silent> <leader>t/ :Tabularize ///<CR>
noremap <silent> <leader>t\| :Tabularize /\|<CR>


" --- Plug 'millermedeiros/vim-statline' ---
" errors color
hi User3 guifg=#FFFFFF guibg=#FF0000 gui=bold ctermfg=15 ctermbg=1 cterm=bold
let g:statline_fugitive = 1
let g:statline_filename_relative = 1
let g:statline_mixed_indent_string = '[mix]'


" --- limelight.vim ---
" Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240

" Color name (:help gui-colors) or RGB color
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#777777'

" Default: 0.5
let g:limelight_default_coefficient = 0.7

" Number of preceding/following paragraphs to include (default: 0)
let g:limelight_paragraph_span = 1

" Beginning/end of paragraph
"   When there's no empty line between the paragraphs
"   and each paragraph starts with indentation
let g:limelight_bop = '^\s'
let g:limelight_eop = '\ze\n^\s'

" Highlighting priority (default: 10)
"   Set it to -1 not to overrule hlsearch
let g:limelight_priority = -1


" --- Plug 'suan/vim-instant-markdown' ---
let g:instant_markdown_autostart = 0


" --- Plug 'pangloss/vim-javascript' ---
let g:javascript_plugin_jsdoc = 1


" --- Plug 'fatih/vim-go' ---
set autowrite


"  Go syntax highlighting
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_operators = 1

" Auto formatting and importing
let g:go_fmt_autosave = 1
let g:go_fmt_command = "goimports"

" Status line types/signatures
let g:go_auto_type_info = 1

" Run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

" Map keys for most used commands.
" Ex: `\b` for building, `\r` for running and `\b` for running test.
augroup go_cmds
    autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
    autocmd FileType go nmap <leader>r  <Plug>(go-run)
    autocmd FileType go nmap <leader>t  <Plug>(go-test)
augroup END


" --- Plug 'wlangstroth/vim-racket' ---
if has("autocmd")
    au BufReadPost *.rjtm *.rktl set filetype=racket
    au filetype racket set lisp
    au filetype racket set autoindent
endif


" --- Plug 'yggdroot/indentline' ---
let g:indentLine_setColors = 1
let g:indentLine_char_list = ['|', '¦', '┆', '┊']


" Prevent conceal links
let g:vim_json_syntax_conceal = 0
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0


" --- Plug 'alvan/vim-closetag' ---
let g:closetag_filenames = '*.html, *.xhtml, *.phtml, *svelte, *js, *.tsx'
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx'
let g:closetag_filetypes = 'html,xhtml,phtml'
let g:closetag_xhtml_filetypes = 'xhtml,jsx'
let g:closetag_emptyTags_caseSensitive = 1
let g:closetag_regions = {
    \ 'typescript.tsx': 'jsxRegion,tsxRegion',
    \ 'javascript.jsx': 'jsxRegion',
    \ }
let g:closetag_shortcut = '>'
let g:closetag_close_shortcut = '<leader>>'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FILE HANDLING
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

augroup mm_buf_cmds
    " clear commands before resetting
    autocmd!

    " Automatically removing all trailing whitespace
    autocmd BufWritePre * %s/\s\+$//e


    " Enable coc-highlight
    autocmd CursorHold * silent call CocActionAsync('highlight')

augroup END

" FIXME: YAML setup
" augroup yamlcmds
"     autocmd BufReadPost *yaml,*yml colorscheme molokai
"     autocmd BufWinLeave *yaml,*yml colorscheme molokai
"     autocmd BufReadPost *.yaml,*.yml set sw=4 ts=4 sts=4 expandtab
"     autocmd Bufwritepre *.yaml,*.yml silent! %s/\s\+$// " Remove trailing whitespace
"     autocmd BufwritePre *.yaml,*yml silent! %s/^\(\s*\)#\(\S\)/\1# \2/g
"     autocmd BufwritePre *.yaml,*yml silent! %s/^\(\s*\)#\(\w\)/\1- \2/g
" augroup END
